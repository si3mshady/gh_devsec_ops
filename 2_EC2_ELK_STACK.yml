AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Environment:
    Type: String

  StackName:
    Type: String

Conditions:
  IsDevEnvironment: !Equals [!Ref Environment, "dev"]

Resources:
  SecurityGroupGrafanaProm:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to Prometheus and Grafana.
      Tags:
        - Key: Name
          Value: !Join ['-', ['SecurityGroupGrafanaProm', !Ref Environment]]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 0.0.0.0/0

  ElasticIpELK:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EC2InstancePrometheusGrafana:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !If
        - IsDevEnvironment
        - ami-0a695f0d95cefc163  # AMI ID for 'dev' environment
        - ami-007855ac798b5175e  # AMI ID for 'prod' environment
      InstanceType: t2.large
      KeyName: turnthepage
      SecurityGroupIds:
        - !Ref SecurityGroupGrafanaProm
      Tags:
        - Key: Name
          Value: !Join ['-', ['PrometheusAndGrafana-bluegreen-', !Ref Environment]]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install wget
          sudo yum install wget -y
          # Download prom_install and grafana_install
          wget https://raw.githubusercontent.com/si3mshady/gh_devsec_ops/main/prom_install.sh
          wget https://raw.githubusercontent.com/si3mshady/gh_devsec_ops/main/grafana_install.sh

          # Make prom_install and grafana_install executable
          chmod +x prom_install.sh
          chmod +x grafana_install.sh

          # Run prom_install
          ./prom_install.sh
          # Run grafana_install
          ./grafana_install.sh

          # Configure Prometheus to forward logs to ELK
          echo "elk_host:${ElasticIpELK.PublicIp}" >> /etc/prometheus/prometheus.yml

#new 
  EC2InstanceELK:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !If
        - IsDevEnvironment
        - ami-0a695f0d95cefc163  # AMI ID for 'dev' environment
        - ami-053b0d53c279acc90 # AMI ID for 'prod' environment
      InstanceType: t2.large
      KeyName: turnthepage
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 100
          VolumeType: gp2
      SecurityGroupIds:
        - !Ref SecurityGroupGrafanaProm
      Tags:
        - Key: Name
          Value: !Join ['-', ['ELK-', !Ref Environment]]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Update the package index
          sudo apt-get update

          # Install dependencies to allow apt to use a repository over HTTPS
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

          # Add Docker's official GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

          # Add the Docker repository
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Update the package index again
          sudo apt-get update

          # Install Docker
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          # Start the Docker service
          sudo systemctl start docker

          # Enable Docker to start on system boot
          sudo systemctl enable docker

          # Check if Docker is running
          if sudo systemctl is-active --quiet docker; then
            echo "Docker is running."
          else
            echo "Docker failed to start."
          fi

          # Install Git
          sudo apt-get install -y git

          # Clone the repository with the Docker Compose file
          git clone https://github.com/your/repository.git
          cd repository

          # Create a shell script with the Docker Compose file
          cat <<EOF >docker-compose.yml
          $(cat <<'DOCKER_COMPOSE_FILE'
          version: '3.8'
          services:
            elasticsearch:
              image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
              container_name: elasticsearch
              environment:
                - discovery.type=single-node
              ports:
                - 9200:9200
                - 9300:9300
              volumes:
                - esdata:/usr/share/elasticsearch/data

            logstash:
              image: docker.elastic.co/logstash/logstash:7.15.0
              container_name: logstash
              volumes:
                - ./logstash-config:/usr/share/logstash/pipeline
              ports:
                - 5044:5044

            kibana:
              image: docker.elastic.co/kibana/kibana:7.15.0
              container_name: kibana
              ports:
                - 5601:5601
              depends_on:
                - elasticsearch

          volumes:
            esdata:
              driver: local
          DOCKER_COMPOSE_FILE
          )
          EOF

          # Run Docker Compose
          sudo docker-compose up

Outputs:
  PublicDnsName:
    Value: !GetAtt ElasticIpELK.PublicIp

     
# Save the script to a file (e.g., install_elk.sh), make it executable using the command chmod +x install_elk.sh, and then execute it with ./install_elk.sh.

# This script performs the following steps:

# Updates the system packages.
# Installs the Java Runtime Environment (JRE).
# Downloads and installs Elasticsearch.
# Enables and starts the Elasticsearch service.
# Installs Logstash.
# Enables and starts the Logstash service.
# Installs Kibana.
# Enables and starts the Kibana service.
# After running this script, the ELK stack should be installed and running on your Ubuntu system. You can access Kibana by visiting http://localhost:5601 in your web browser.